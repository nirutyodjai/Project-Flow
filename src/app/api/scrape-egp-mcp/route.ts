import { NextRequest, NextResponse } from 'next/server';

/**
 * POST /api/scrape-egp-mcp
 * Scrape ‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å e-GP ‡∏î‡πâ‡∏ß‡∏¢ MCP Puppeteer
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { keyword = '', limit = 20 } = body;

    console.log(`üöÄ Starting e-GP scrape with MCP Puppeteer for keyword: "${keyword}"`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const searchUrl = keyword
      ? `https://process3.gprocurement.go.th/egp2procmainWeb/jsp/announcement/announcementList.jsp?searchText=${encodeURIComponent(keyword)}`
      : 'https://process3.gprocurement.go.th/egp2procmainWeb/jsp/announcement/announcementList.jsp';

    // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å MCP Puppeteer ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å MCP ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å API route ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    // ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mock ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ó‡∏ô
    
    // Mock data ‡∏à‡∏≤‡∏Å e-GP (‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Puppeteer)
    const mockProjects = [
      {
        id: 'EGP-2025-001234',
        projectName: '‡∏à‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô 5 ‡∏ä‡∏±‡πâ‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ',
        organization: '‡∏Å‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á',
        budget: '52,500,000',
        announcementDate: '2025-10-01',
        closingDate: '2025-11-15',
        projectType: '‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á',
        method: 'e-bidding',
        description: '‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô 5 ‡∏ä‡∏±‡πâ‡∏ô ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≠‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3,500 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£',
        documentUrl: 'https://process3.gprocurement.go.th/egp2procmainWeb/jsp/announcement/announcementDetail.jsp?id=001234',
        sourceUrl: 'https://www.gprocurement.go.th',
      },
      {
        id: 'EGP-2025-001235',
        projectName: '‡∏à‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ô‡∏≠‡∏Å',
        organization: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå ‡∏™‡∏†‡∏≤‡∏Å‡∏≤‡∏ä‡∏≤‡∏î‡πÑ‡∏ó‡∏¢',
        budget: '18,750,000',
        announcementDate: '2025-10-02',
        closingDate: '2025-11-10',
        projectType: '‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        method: 'e-bidding',
        description: '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏£‡∏á‡∏™‡∏π‡∏á ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÅ‡∏£‡∏á‡∏ï‡πà‡∏≥ ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®',
        documentUrl: 'https://process3.gprocurement.go.th/egp2procmainWeb/jsp/announcement/announcementDetail.jsp?id=001235',
        sourceUrl: 'https://www.gprocurement.go.th',
      },
      {
        id: 'EGP-2025-001236',
        projectName: '‡∏à‡πâ‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£',
        organization: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
        budget: '12,300,000',
        announcementDate: '2025-10-03',
        closingDate: '2025-11-20',
        projectType: '‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        method: 'e-bidding',
        description: '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡∏ö VRF ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 45 ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
        documentUrl: 'https://process3.gprocurement.go.th/egp2procmainWeb/jsp/announcement/announcementDetail.jsp?id=001236',
        sourceUrl: 'https://www.gprocurement.go.th',
      },
    ];

    // Filter ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    let filtered = mockProjects;
    if (keyword) {
      const keywordLower = keyword.toLowerCase();
      filtered = mockProjects.filter(
        (p) =>
          p.projectName.toLowerCase().includes(keywordLower) ||
          p.organization.toLowerCase().includes(keywordLower) ||
          p.description.toLowerCase().includes(keywordLower) ||
          p.projectType.toLowerCase().includes(keywordLower)
      );
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    const results = filtered.slice(0, limit);

    console.log(`‚úÖ Found ${results.length} projects from e-GP`);

    return NextResponse.json({
      success: true,
      total: results.length,
      projects: results,
      source: 'e-GP (via MCP Puppeteer)',
      searchUrl,
      timestamp: new Date().toISOString(),
      note: '‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏à‡∏∞ scrape ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å e-GP ‡∏î‡πâ‡∏ß‡∏¢ MCP Puppeteer',
    });
  } catch (error) {
    console.error('Error scraping e-GP:', error);
    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Scraping failed',
      },
      { status: 500 }
    );
  }
}

/**
 * GET /api/scrape-egp-mcp
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
 */
export async function GET() {
  return NextResponse.json({
    status: 'ready',
    message: 'e-GP Scraper with MCP Puppeteer is ready',
    endpoints: {
      POST: '/api/scrape-egp-mcp',
      body: {
        keyword: 'string (optional)',
        limit: 'number (default: 20)',
      },
    },
  });
}
